import{_ as a,i as o,o as t,at as r}from"./chunks/framework.YwE0kBUe.js";const p=JSON.parse('{"title":"配置 UnoCSS","description":"配置使 UnoCSS 强大。","frontmatter":{"title":"配置 UnoCSS","description":"配置使 UnoCSS 强大。","outline":"deep"},"headers":[],"relativePath":"config/index.md","filePath":"config/index.md","lastUpdated":1757738446000}'),l={name:"config/index.md"};function s(i,e,n,c,d,h){return t(),o("div",null,e[0]||(e[0]=[r('<h1 id="配置-unocss" tabindex="-1">配置 UnoCSS <a class="header-anchor" href="#配置-unocss" aria-label="Permalink to &quot;配置 UnoCSS&quot;">​</a></h1><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><p>配置使 UnoCSS 强大。</p><ul><li><a href="/config/rules.html">规则</a> - 定义原子 CSS 工具</li><li><a href="/config/shortcuts.html">快捷键</a> - 将多个规则组合成一个简写。</li><li><a href="/config/theme.html">主题</a> - 定义主题变量。</li><li><a href="/config/variants.html">变种</a> - 将自定义约定应用于规则。</li><li><a href="/config/extractors.html">提取器</a> - 定义工具的使用何处以及如何被提取。</li><li><a href="/config/preflights.html">预飞行</a> - 定义全局原始 CSS。</li><li><a href="/config/layers.html">层</a> - 定义每个工具层的顺序。</li><li><a href="/config/presets.html">预设</a> - 预定义配置以满足常见用例。</li><li><a href="/config/transformers.html">转换器</a> - 代码转换器，以用户源代码支持约定。</li><li><a href="/config/autocomplete.html">自动完成</a> - 定义自定义自动完成建议。</li></ul><h2 id="选项" tabindex="-1">选项 <a class="header-anchor" href="#选项" aria-label="Permalink to &quot;选项&quot;">​</a></h2><h3 id="rules" tabindex="-1">rules <a class="header-anchor" href="#rules" aria-label="Permalink to &quot;rules&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Rule&lt;Theme&gt;[]</code></li></ul><p>生成 CSS 工具的规则。后面的条目具有更高的优先级。</p><h3 id="shortcuts" tabindex="-1">shortcuts <a class="header-anchor" href="#shortcuts" aria-label="Permalink to &quot;shortcuts&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>UserShortcuts&lt;Theme&gt;</code></li></ul><p>类似于 Windi CSS 的快捷键，允许您通过组合现有工具来创建新的工具。后面的条目具有更高的优先级。</p><h3 id="theme" tabindex="-1">theme <a class="header-anchor" href="#theme" aria-label="Permalink to &quot;theme&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Theme</code></li></ul><p>用于规则之间共享配置的主题对象。</p><h3 id="extendtheme" tabindex="-1">extendTheme <a class="header-anchor" href="#extendtheme" aria-label="Permalink to &quot;extendTheme&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Arrayable&lt;ThemeExtender&lt;Theme&gt;&gt;</code> 自定义函数变更主题对象。</li></ul><p>也可以返回一个新的主题对象以完全替换原始对象。</p><h3 id="variants" tabindex="-1">variants <a class="header-anchor" href="#variants" aria-label="Permalink to &quot;variants&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Variant&lt;Theme&gt;[]</code></li></ul><p>预处理选择器的变种，能够重写 CSS 对象。</p><h3 id="extractors" tabindex="-1">extractors <a class="header-anchor" href="#extractors" aria-label="Permalink to &quot;extractors&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Extractor[]</code></li></ul><p>提取器处理源文件并输出可能的类/选择器。可以是语言感知。</p><h3 id="preflights" tabindex="-1">preflights <a class="header-anchor" href="#preflights" aria-label="Permalink to &quot;preflights&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Preflight&lt;Theme&gt;[]</code></li></ul><p>原始 CSS 注入。</p><h3 id="layers" tabindex="-1">layers <a class="header-anchor" href="#layers" aria-label="Permalink to &quot;layers&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Record&lt;string, number&gt;</code></li></ul><p>层的顺序。默认值为 0。</p><h3 id="outputtocsslayers" tabindex="-1">outputToCssLayers <a class="header-anchor" href="#outputtocsslayers" aria-label="Permalink to &quot;outputToCssLayers&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>boolean | UseCssLayersOptions</code></li><li><strong>默认:</strong> <code>false</code></li></ul><p>将层输出到 CSS 级联层。</p><h4 id="csslayername" tabindex="-1">cssLayerName <a class="header-anchor" href="#csslayername" aria-label="Permalink to &quot;cssLayerName&quot;">​</a></h4><ul><li><strong>类型:</strong> <code>(internalLayer: string) =&gt; string | undefined | null</code></li></ul><p>指定内部层应输出到的 CSS 层的名称（可以是子层，例如 &quot;mylayer.mysublayer&quot;）。</p><p>如果返回 <code>undefined</code>，则使用内部层名称作为 CSS 层名称。 如果返回 <code>null</code>，则内部层将不输出到 CSS 层。</p><h3 id="sortlayers" tabindex="-1">sortLayers <a class="header-anchor" href="#sortlayers" aria-label="Permalink to &quot;sortLayers&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>(layers: string[]) =&gt; string[]</code></li></ul><p>自定义函数以排序层。</p><h3 id="presets" tabindex="-1">presets <a class="header-anchor" href="#presets" aria-label="Permalink to &quot;presets&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>(PresetOrFactory&lt;Theme&gt; | PresetOrFactory&lt;Theme&gt;[])[]</code></li></ul><p>用于常见用例的预定义配置。</p><h3 id="transformers" tabindex="-1">transformers <a class="header-anchor" href="#transformers" aria-label="Permalink to &quot;transformers&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>SourceCodeTransformer[]</code></li></ul><p>自定义源代码转换器。</p><h3 id="blocklist" tabindex="-1">blocklist <a class="header-anchor" href="#blocklist" aria-label="Permalink to &quot;blocklist&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>BlocklistRule[]</code></li></ul><p>规则，用于排除设计系统的选择器（缩小可能性）。结合 <code>warnExcluded</code> 选项也可以帮助您识别错误使用。</p><h3 id="safelist" tabindex="-1">safelist <a class="header-anchor" href="#safelist" aria-label="Permalink to &quot;safelist&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>string[]</code></li></ul><p>始终包含的工具。</p><h3 id="preprocess" tabindex="-1">preprocess <a class="header-anchor" href="#preprocess" aria-label="Permalink to &quot;preprocess&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Arrayable&lt;Preprocessor&gt;</code></li></ul><p>预处理传入的工具，返回假值以排除。</p><h3 id="postprocess" tabindex="-1">postprocess <a class="header-anchor" href="#postprocess" aria-label="Permalink to &quot;postprocess&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Arrayable&lt;Postprocessor&gt;</code></li></ul><p>后处理生成的工具对象。</p><h3 id="separators" tabindex="-1">separators <a class="header-anchor" href="#separators" aria-label="Permalink to &quot;separators&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Arrayable&lt;string&gt;</code></li><li><strong>默认:</strong> <code>[&#39;:&#39;, &#39;-&#39;]</code></li></ul><p>变种分隔符。</p><h3 id="extractordefault" tabindex="-1">extractorDefault <a class="header-anchor" href="#extractordefault" aria-label="Permalink to &quot;extractorDefault&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Extractor | null | false</code></li><li><strong>默认:</strong> <code>import(&#39;@unocss/core&#39;).defaultExtractor</code></li></ul><p>始终应用的默认提取器。默认情况下，它通过空格和引号拆分源代码。</p><p>可以被预设或用户配置替换，仅能有一个默认提取器，后一个将覆盖先前的提取器。</p><p>传递 <code>null</code> 或 <code>false</code> 以禁用默认提取器。</p><h3 id="autocomplete" tabindex="-1">autocomplete <a class="header-anchor" href="#autocomplete" aria-label="Permalink to &quot;autocomplete&quot;">​</a></h3><p>自动完成的附加选项。</p><h4 id="templates" tabindex="-1">templates <a class="header-anchor" href="#templates" aria-label="Permalink to &quot;templates&quot;">​</a></h4><ul><li><strong>类型:</strong> <code>Arrayable&lt;AutoCompleteFunction | AutoCompleteTemplate&gt;</code></li></ul><p>自定义函数/模板以提供自动完成建议。</p><h4 id="extractors-1" tabindex="-1">extractors <a class="header-anchor" href="#extractors-1" aria-label="Permalink to &quot;extractors&quot;">​</a></h4><ul><li><strong>类型:</strong> <code>Arrayable&lt;AutoCompleteExtractor&gt;</code></li></ul><p>自定义提取器以拾取可能的类并将类名样式建议转换为正确格式。</p><h4 id="shorthands" tabindex="-1">shorthands <a class="header-anchor" href="#shorthands" aria-label="Permalink to &quot;shorthands&quot;">​</a></h4><ul><li><strong>类型:</strong> <code>Record&lt;string, string | string[]&gt;</code></li></ul><p>自定义简写以提供自动完成建议。如果值是数组，它将与 <code>|</code> 连接并用 <code>()</code> 包裹。</p><h3 id="content" tabindex="-1">content <a class="header-anchor" href="#content" aria-label="Permalink to &quot;content&quot;">​</a></h3><p>用于提取工具用法的源选项。</p><p>支持的来源：</p><ul><li><code>filesystem</code> - 从文件系统提取</li><li><code>inline</code> - 从纯行内文本提取</li><li><code>pipeline</code> - 从构建工具的转换管道提取，例如 Vite 和 Webpack</li></ul><p>从每个来源提取的用法将被 <strong>合并</strong> 在一起。</p><h4 id="filesystem" tabindex="-1">filesystem <a class="header-anchor" href="#filesystem" aria-label="Permalink to &quot;filesystem&quot;">​</a></h4><ul><li><strong>类型:</strong> <code>string[]</code></li><li><strong>默认:</strong> <code>[]</code></li></ul><p>从文件系统中提取的全局模式，除了其他内容源。<code>node_modules</code> 默认情况下被忽略，但当您指定路径包含 <code>node_modules</code> 时，unocss 会从中扫描。</p><p>在开发模式下，文件将被监视并触发 HMR。</p><h4 id="inline" tabindex="-1">inline <a class="header-anchor" href="#inline" aria-label="Permalink to &quot;inline&quot;">​</a></h4><ul><li><strong>类型:</strong> <code>string | { code: string; id?: string } | (() =&gt; Awaitable&lt;string | { code: string; id?: string }&gt;)) []</code></li></ul><p>要提取的行内文本。</p><h4 id="pipeline" tabindex="-1">pipeline <a class="header-anchor" href="#pipeline" aria-label="Permalink to &quot;pipeline&quot;">​</a></h4><p>确定是否从构建工具的转换管道中提取特定模块的过滤器。</p><p>当前仅适用于 Vite 和 Webpack 集成。</p><p>设置为 <code>false</code> 以禁用。</p><h5 id="include" tabindex="-1">include <a class="header-anchor" href="#include" aria-label="Permalink to &quot;include&quot;">​</a></h5><ul><li><strong>类型:</strong> <code>FilterPattern</code></li><li><strong>默认:</strong> <code>[/\\.(vue|svelte|[jt]sx|vine.ts|mdx?|astro|elm|php|phtml|html)($|\\?)/]</code></li></ul><p>过滤被提取文件的模式。支持正则表达式和 <code>picomatch</code> glob 模式。</p><p>默认情况下，<code>.ts</code> 和 <code>.js</code> 文件不会被提取。</p><h5 id="exclude" tabindex="-1">exclude <a class="header-anchor" href="#exclude" aria-label="Permalink to &quot;exclude&quot;">​</a></h5><ul><li><strong>类型:</strong> <code>FilterPattern</code></li><li><strong>默认:</strong> <code>[/\\.(css|postcss|sass|scss|less|stylus|styl)($|\\?)/]</code></li></ul><p>不被提取文件的过滤模式。支持正则表达式和 <code>picomatch</code> glob 模式。</p><p>默认情况下，<code>node_modules</code> 和 <code>dist</code> 也会被提取。</p><h3 id="configresolved" tabindex="-1">configResolved <a class="header-anchor" href="#configresolved" aria-label="Permalink to &quot;configResolved&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>(config: ResolvedConfig) =&gt; void</code></li></ul><p>用于修改解析配置的钩子。</p><p>首先运行预设，然后是用户配置。</p><h3 id="configfile" tabindex="-1">configFile <a class="header-anchor" href="#configfile" aria-label="Permalink to &quot;configFile&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>string | false</code></li></ul><p>从配置文件加载。</p><p>设置为 <code>false</code> 以禁用。</p><h3 id="configdeps" tabindex="-1">configDeps <a class="header-anchor" href="#configdeps" aria-label="Permalink to &quot;configDeps&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>string[]</code></li></ul><p>将触发配置重载的文件列表。</p><h3 id="cli" tabindex="-1">cli <a class="header-anchor" href="#cli" aria-label="Permalink to &quot;cli&quot;">​</a></h3><p>UnoCSS CLI 选项。</p><h4 id="entry" tabindex="-1">entry <a class="header-anchor" href="#entry" aria-label="Permalink to &quot;entry&quot;">​</a></h4><ul><li><strong>类型:</strong> <code>Arrayable&lt;CliEntryItem&gt;</code></li></ul><p>UnoCSS CLI 入口点。</p><h5 id="patterns" tabindex="-1">patterns <a class="header-anchor" href="#patterns" aria-label="Permalink to &quot;patterns&quot;">​</a></h5><ul><li><strong>类型:</strong> <code>string[]</code></li></ul><p>从文件系统提取的 glob 模式。</p><h5 id="outfile" tabindex="-1">outFile <a class="header-anchor" href="#outfile" aria-label="Permalink to &quot;outFile&quot;">​</a></h5><ul><li><strong>类型:</strong> <code>string</code></li></ul><p>输出文件路径。</p><h3 id="shortcutslayer" tabindex="-1">shortcutsLayer <a class="header-anchor" href="#shortcutslayer" aria-label="Permalink to &quot;shortcutsLayer&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>string</code></li><li><strong>默认:</strong> <code>&#39;shortcuts&#39;</code></li></ul><p>快捷键的布局名称。</p><h3 id="envmode" tabindex="-1">envMode <a class="header-anchor" href="#envmode" aria-label="Permalink to &quot;envMode&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>&#39;dev&#39; | &#39;build&#39;</code></li><li><strong>默认:</strong> <code>&#39;build&#39;</code></li></ul><p>环境模式。</p><h3 id="details" tabindex="-1">details <a class="header-anchor" href="#details" aria-label="Permalink to &quot;details&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>boolean</code></li></ul><p>揭示内部细节以进行调试/检查。</p><h3 id="warn" tabindex="-1">warn <a class="header-anchor" href="#warn" aria-label="Permalink to &quot;warn&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>boolean</code></li><li><strong>默认:</strong> <code>true</code></li></ul><p>当匹配的选择器出现在黑名单中时发出警告。</p>',134)]))}const g=a(l,[["render",s]]);export{p as __pageData,g as default};
